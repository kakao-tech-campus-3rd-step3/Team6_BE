import{_ as o,c as i,o as r,ae as d}from"./chunks/framework.CBTkueSR.js";const a="/assets/er-diagram.DKSm_cZY.png",h=JSON.parse('{"title":"데이터베이스 구조 (ERD)","description":"","frontmatter":{},"headers":[],"relativePath":"er-diagram.md","filePath":"er-diagram.md"}'),l={name:"er-diagram.md"};function s(c,e,t,n,u,m){return r(),i("div",null,[...e[0]||(e[0]=[d('<h1 id="데이터베이스-구조-erd" tabindex="-1">데이터베이스 구조 (ERD) <a class="header-anchor" href="#데이터베이스-구조-erd" aria-label="Permalink to &quot;데이터베이스 구조 (ERD)&quot;">​</a></h1><p>본 문서는 &#39;얼음땡&#39; 프로젝트의 데이터베이스 테이블 구조와 관계를 설명합니다.</p><p><img src="'+a+'" alt="ER Diagram"></p><h2 id="테이블-설명" tabindex="-1">테이블 설명 <a class="header-anchor" href="#테이블-설명" aria-label="Permalink to &quot;테이블 설명&quot;">​</a></h2><h3 id="users" tabindex="-1"><code>users</code> <a class="header-anchor" href="#users" aria-label="Permalink to &quot;`users`&quot;">​</a></h3><p>사용자 정보를 저장하는 테이블입니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>user_id</code> (PK): 사용자 고유 ID</li><li><code>user_name</code>: 사용자 이름</li><li><code>user_phone</code>: 전화번호 (고유값)</li><li><code>user_age</code>: 나이</li><li><code>user_mbti</code>: MBTI 유형</li><li><code>user_introduction</code>: 한 줄 소개</li></ul></li></ul><h3 id="rooms" tabindex="-1"><code>rooms</code> <a class="header-anchor" href="#rooms" aria-label="Permalink to &quot;`rooms`&quot;">​</a></h3><p>생성된 게임방의 정보를 저장하는 테이블입니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>room_id</code> (PK): 방 고유 ID</li><li><code>room_code</code>: 방 참여를 위한 고유 코드</li><li><code>room_name</code>: 방 이름</li><li><code>room_capacity</code>: 최대 인원</li></ul></li></ul><h3 id="room-participants" tabindex="-1"><code>room_participants</code> <a class="header-anchor" href="#room-participants" aria-label="Permalink to &quot;`room_participants`&quot;">​</a></h3><p>사용자와 방의 다대다 관계를 나타내는 중간 테이블입니다. 어떤 사용자가 어떤 방에 어떤 역할(HOST, MEMBER)로 참여하는지 저장합니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>id</code> (PK): 관계 고유 ID</li><li><code>room_id</code> (FK): <code>rooms</code> 테이블 참조</li><li><code>user_id</code> (FK): <code>users</code> 테이블 참조</li><li><code>role</code>: 방에서의 역할 (HOST 또는 MEMBER)</li></ul></li></ul><h3 id="questions" tabindex="-1"><code>questions</code> <a class="header-anchor" href="#questions" aria-label="Permalink to &quot;`questions`&quot;">​</a></h3><p>아이스브레이킹에 사용될 질문 내용을 저장하는 테이블입니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>question_id</code> (PK): 질문 고유 ID</li><li><code>question_content</code>: 질문 내용</li><li><code>question_type</code>: 질문 유형 (COMMON, PERSONAL 등)</li></ul></li></ul><h3 id="room-questions" tabindex="-1"><code>room_questions</code> <a class="header-anchor" href="#room-questions" aria-label="Permalink to &quot;`room_questions`&quot;">​</a></h3><p>각 방에서 사용되는 질문 목록을 관리합니다. <code>rooms</code>와 <code>questions</code>의 다대다 관계를 나타냅니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>id</code> (PK): 관계 고유 ID</li><li><code>room_id</code> (FK): <code>rooms</code> 테이블 참조</li><li><code>question_id</code> (FK): <code>questions</code> 테이블 참조</li></ul></li></ul><h3 id="user-interests" tabindex="-1"><code>user_interests</code> <a class="header-anchor" href="#user-interests" aria-label="Permalink to &quot;`user_interests`&quot;">​</a></h3><p>사용자의 관심사를 저장합니다. <code>users</code>와 <code>interests</code>의 다대다 관계를 나타냅니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>user_interest_id</code> (PK): 관계 고유 ID</li><li><code>user_id</code> (FK): <code>users</code> 테이블 참조</li><li><code>interest</code>: 관심사 (Enum 타입)</li></ul></li></ul><h3 id="manittos" tabindex="-1"><code>manittos</code> <a class="header-anchor" href="#manittos" aria-label="Permalink to &quot;`manittos`&quot;">​</a></h3><p>마니또 게임 진행 시, 누가 누구의 마니또인지 관계를 저장하는 테이블입니다.</p><ul><li><strong>주요 컬럼</strong>: <ul><li><code>manitto_id</code> (PK): 관계 고유 ID</li><li><code>giver_id</code> (FK): 마니또 역할을 하는 사용자 (<code>users</code> 테이블 참조)</li><li><code>receiver_id</code> (FK): 마니또의 도움을 받는 사용자 (<code>users</code> 테이블 참조)</li><li><code>room_id</code> (FK): 게임이 진행된 방 (<code>rooms</code> 테이블 참조)</li></ul></li></ul>',25)])])}const p=o(l,[["render",s]]);export{h as __pageData,p as default};
